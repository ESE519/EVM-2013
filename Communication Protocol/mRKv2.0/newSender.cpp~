#include "mbed.h"
#include <nrk.h>
#include <include.h>
#include <ulib.h>
#include <stdio.h>
#include <hal.h>
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_stack_check.h>
#include <nrk_stats.h>
#include <string.h>
#include <nrk_time.h>
#include "basic_rf.h"
#include "bmac.h"
#include <ff_basic_sensor.h>
#include <nrk_driver_list.h>
#include <nrk_driver.h>
#include "IAP.h"
#include "jumptable.h"
#include "messageTypes.h"

// Only require MAC address for address decode
//#define MAC_ADDR    0x0001

// Change this to your group channel
#define MY_CHANNEL 2

#define MAX_MOLES  2

#define MAX_RETRANSMISSION        10
#define MAX_TTL 30;

// Gateway has ID = 1, the slaves/moles have ID 2,3 onwards...
#define MY_ID 1
#define MAX_SLAVES 4
# define RSSI_THRESHOLD	200
/*********************************Task declarations***************/
nrk_task_type RX_TASK;
NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
void rx_task (void);

nrk_task_type TX_TASK;
NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
void tx_task (void);

nrk_task_type SD_TASK;
NRK_STK sd_task_stack[NRK_APP_STACKSIZE];
void slaveDiscovery_task (void);

nrk_task_type NM_TASK;
NRK_STK nm_task_stack[NRK_APP_STACKSIZE];
void sendNeighborMsg_task(void);

void nrk_create_taskset ();

char tx_buf[RF_MAX_PAYLOAD_SIZE];
char rx_buf[RF_MAX_PAYLOAD_SIZE];
char nv_buf[RF_MAX_PAYLOAD_SIZE];

volatile uint8_t received_response = 0;


/******* time definitions *******/
nrk_time_t timeend, timeout, timestart;

 

/**********************************/
uint32_t sequenceNumber=1;
//std::map<int , uint8_t> slavesMap;
char slavesList[MAX_SLAVES]={0};
char routingTable[MAX_SLAVES][MAX_SLAVES]={0};
uint32_t lastReceivedSequence[MAX_SLAVES];

void checkSlaves(char*);
void ReduceTTL();
void  addtoRoutingtable();
int main(void)

{   
		nrk_setup_ports();
	  nrk_init();
    bmac_task_config();
    nrk_create_taskset();
    bmac_init (MY_CHANNEL);
    bmac_auto_ack_disable();
    nrk_start();
    return 0;

}


void ReduceTTL(){
	/*
	for (std::map<int,uint8_t >::iterator i =
         slavesMap.begin (); i != slavesMap.end (); i++){
			i->second--;
			if(i->second==0)
				slavesMap.erase(i);
				 }
*/
	}
void checkIfReceivedResponse()
{
	char i = 0 ;
	for(i=1;i<MAX_SLAVES+1;i++)
	{
		if(i!=MY_ID && slavesList[i]!=0)
		{	
		slavesList[i]--;
		if(slavesList[i]==0)
		{
			//printf("Removed node %d",i);
			//removing from routing table
			for(int k=1 ;k < MAX_SLAVES+1;k++){
				routingTable[i][k]=0;  //if the removed node was a destination node in the entry
				routingTable[k][i]=0;  //if the removed node was a next hop in the entry
			}
		}
	}
 }
}



void slaveDiscovery_task(){
	
	uint8_t val;
	nrk_sig_t sd_done_signal;
	 while (!bmac_started ())
        nrk_wait_until_next_period ();
         //printf("Sender node bmac initialised\r\n");
        
        sd_done_signal = bmac_get_tx_done_signal ();
        nrk_signal_register (sd_done_signal);
	 while(1){
			tx_buf[0] = MY_ID; // indicates packet from master
			tx_buf[1] = SLAVE_DISCOVERY; // slave discovery message
			tx_buf[2] = sequenceNumber; // sequenceNumber of the packet
			sequenceNumber++;          // incrementing the packet
			val=bmac_tx_pkt(tx_buf,3);  // transmitting the packet
		  //printf("%d",val);
		 
		 checkIfReceivedResponse();
		 
		 nrk_wait_until_next_period ();
	 }
	 
}


void dump_Routes(){
	for(int i=1; i<MAX_SLAVES+1;i++){
			for(int k=1;k<MAX_SLAVES+1 ;k++){
					if(routingTable[i][k]!=0)
						printf("Found route to %d via %d aat cost of %d\r\n",i,k,routingTable[i][k]);
			}
	}
}
/** processing the neighbor message received **/
void processNeighborMsg(uint8_t *rxBuf, int len){
	
	uint8_t val;
	//printf("Neighbor message received\r\n");
	int destinationNode,receivedCost,receivedFrom;
  receivedFrom = rxBuf[0];	
	if(rxBuf[2]>lastReceivedSequence[rxBuf[0]]){      //checking for duplicates
	   lastReceivedSequence[rxBuf[0]] = rxBuf[2]; 
		 for(int k=3; k < len;k++){
				destinationNode = rxBuf[k] >> 4;  //getting the first 4 bits as destination ID
        receivedCost = 	rxBuf[k] & 0x0F; //getting the last 4 bits as cost
			  printf("Destination Node : %d and Received Cost: %d\r\n",destinationNode,receivedCost);
			 if(destinationNode == MY_ID)    // ignore if the destination address is my id
					continue;
       
			 for(int l=1; l <(MAX_SLAVES+1);l++){
					if(routingTable[destinationNode][l]==0){
						// a new entry received in the routing table 
						routingTable[destinationNode][receivedFrom] = 1 + receivedCost;
						//printf("Added a route to %d through %d\r\n",destinationNode,l);
						break;
					}
					else if((1+receivedCost)< routingTable[destinationNode][l]){
						// a low cost route discovered
						routingTable[destinationNode][l] = 0;
						routingTable[destinationNode][receivedFrom] = (1 + receivedCost); 
						//printf("Edited a route to %d through %d\r\n",destinationNode,l);
						break;
						}
				}
		  	//rxBuf[3+k]|= receivedCost + 1 ;
			}
	//val= bmac_tx_pkt((char *)rxBuf,len);		
}
	



}

/**adding entries to a node's routing table**/
void addtoRoutingtable(){
	uint8_t nextHop, cost, destID;
	for (int i = 1;i < (MAX_SLAVES+1) ;i++){
		if(slavesList[i]!=0){
			destID=i;
			nextHop=i;
			cost=1;
			routingTable[destID][nextHop]=cost;			
		}
	}
 
}

void addToNeighbor(uint8_t *rxBuf)
{
	
  int i;
	
	if(rxBuf[2]>lastReceivedSequence[rxBuf[0]] && slavesList[rxBuf[0]]==0)
	{
		slavesList[rxBuf[0]]=10;        //10 is set to ensure that when 10s timeout happens remove the node
		lastReceivedSequence[rxBuf[0]] = rxBuf[2];
		//printf("%d Added as a neighbor",rxBuf[0]);
 		
	
	}
/*	printf("Neighbors of %d :",MY_ID);
	
	for(i=1;i<=MAX_SLAVES;i++)
	{
		if(slavesList[i]!=0)
		{
			printf("\t%d\t",i);
		}
	}
*/	
	addtoRoutingtable();
	
}





/** sharing information among neighbor nodes **/

void sendNeighborMsg(){
	uint8_t val,costSent,destSent;
	nv_buf[0] = MY_ID;
	nv_buf[1] = NEIGHBOR_MSG;
  nv_buf[2] =sequenceNumber;
	sequenceNumber++;
	for(int i=1;i<MAX_SLAVES+1;i++){
		for (int k=1;k<MAX_SLAVES+1;k++){
    //*first 4 bits are destination and last 4 bits are cost.    
		if (routingTable[i][k]!=0){ //if an entry exists fro a destination node 
		    nv_buf[2+i] = i;	//destination node
			  nv_buf[2+i]<<=4; //first bits as destination
			  destSent=nv_buf[2+i];
				nv_buf[2+i] |= routingTable[i][k] ;  //last 4 bits as cost
			}			
			printf("routing table [%d][%d]= %d\r\n",i,k,routingTable[i][k]);
			printf("Destination Node Sent: %d Cost sent: %d\r\n",costSent,destSent);
		}
	}	
val=bmac_tx_pkt(nv_buf,sizeof(nv_buf));	
//printf("Transmitted dv packet %d\n",val);
}

	void sendNeighborMsg_task(){
		while(1){
			//printf("neighbor message task scheduled\r\n");  
			sendNeighborMsg();
			//dump_Routes();
			nrk_wait_until_next_period();
		}
	}

void rx_task ()
{ 
	  uint8_t rssi,len,*local_rx_buf,mole, from, received_round;;
    int i,r,fromMole; 
	  bmac_set_cca_thresh(DEFAULT_BMAC_CCA);
    bmac_rx_pkt_set_buffer (rx_buf,RF_MAX_PAYLOAD_SIZE);
    int val;
    while(!bmac_started());
    printf("Receiver node Bmac initialised\n");
  
        while(1) {
           
             nrk_wait_until_next_period();
					  if( !bmac_rx_pkt_ready())
                continue;
           
            nrk_led_toggle(ORANGE_LED);
            local_rx_buf = (uint8_t *)bmac_rx_pkt_get (&len, &rssi);
            from=local_rx_buf[0];
            
						// printf("RSSI: %d\n\r",rssi);
						if(len!=0)
						{
            for(i=0;i<len;i++)
						//printf("%d", local_rx_buf[i]);
            //printf("\r\n"); 
						
						//Check the type of message and decide what to do ?????
						

						switch(local_rx_buf[1])
							{
							case SLAVE_DISCOVERY:
								if(rssi > RSSI_THRESHOLD)
								{
								addToNeighbor(local_rx_buf);
								}
							break;	
							case NEIGHBOR_MSG:
							//	printf("Received Neighbor Message");
								if(rssi > RSSI_THRESHOLD)
								{
								 processNeighborMsg(local_rx_buf, len);
								}
							break;
							default:
										//Do nothing as of now
							break;
							}
							
	
						}
					 bmac_rx_pkt_release ();   
					}
					
}


void tx_task ()
{
	ReduceTTL(); // reduce TTL for enteries in the neighbor table
    //printf("tx task scheduled\r\n");
    nrk_sig_t tx_done_signal;
    uint8_t val, sequenceNumber;
    nrk_time_t r_period;   
	   	
    while (!bmac_started ())
        nrk_wait_until_next_period ();
         printf("Sender node bmac initialised\r\n");
        
        tx_done_signal = bmac_get_tx_done_signal ();
        nrk_signal_register (tx_done_signal);
        
		 while(1) {
       
			 /*
			 if(!received_response){
            tx_buf[0] = MY_ID; 
            tx_buf[1] = 256; //function Size
		 
            					
            nrk_led_toggle(ORANGE_LED);
            val=bmac_tx_pkt(tx_buf, 102);
            //printf("Transmitted packet");   
            nrk_wait_until_next_period ();
        }
				*/
			 }
       
    }       
   
   
 



void nrk_create_taskset ()
{
		nrk_status_t status;
	
    RX_TASK.task = rx_task;
    nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
    RX_TASK.prio = 2;
    RX_TASK.FirstActivation = TRUE;
    RX_TASK.Type = BASIC_TASK;
    RX_TASK.SchType = PREEMPTIVE;
    RX_TASK.period.secs = 0;
    RX_TASK.period.nano_secs = 50 * NANOS_PER_MS;
    RX_TASK.cpu_reserve.secs = 0;
    RX_TASK.cpu_reserve.nano_secs = 10 * NANOS_PER_MS;
    RX_TASK.offset.secs = 0;
    RX_TASK.offset.nano_secs = 0;
    nrk_activate_task (&RX_TASK);

    TX_TASK.task = tx_task;
    nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE);
    TX_TASK.prio = 1;
    TX_TASK.FirstActivation = TRUE;
    TX_TASK.Type = BASIC_TASK;
    TX_TASK.SchType = PREEMPTIVE;
    TX_TASK.period.secs = 3;
    TX_TASK.period.nano_secs = 0;
    TX_TASK.cpu_reserve.secs = 0;
    TX_TASK.cpu_reserve.nano_secs = 600 * NANOS_PER_MS;
    TX_TASK.offset.secs = 0;
    TX_TASK.offset.nano_secs = 0;
    nrk_activate_task (&TX_TASK);
		
	
		SD_TASK.task = slaveDiscovery_task;
    nrk_task_set_stk( &SD_TASK, sd_task_stack, NRK_APP_STACKSIZE);
		SD_TASK.prio = 3;
    SD_TASK.FirstActivation = TRUE;
    SD_TASK.Type = BASIC_TASK;
    SD_TASK.SchType = PREEMPTIVE;
    SD_TASK.period.secs = 1;
    SD_TASK.period.nano_secs = 0;
    SD_TASK.cpu_reserve.secs = 0;
    SD_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
    SD_TASK.offset.secs = 0;
    SD_TASK.offset.nano_secs = 0;
		nrk_activate_task (&SD_TASK);
		
		NM_TASK.task = sendNeighborMsg_task;
    nrk_task_set_stk(&NM_TASK, nm_task_stack, NRK_APP_STACKSIZE);
		NM_TASK.prio = 2;
    NM_TASK.FirstActivation = TRUE;
    NM_TASK.Type = BASIC_TASK;
    NM_TASK.SchType = PREEMPTIVE;
    NM_TASK.period.secs = 1;
    NM_TASK.period.nano_secs = 0;
    NM_TASK.cpu_reserve.secs = 0;
    NM_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
    NM_TASK.offset.secs = 0;
    NM_TASK.offset.nano_secs = 0;
		status= nrk_activate_task (&NM_TASK);
		
    printf ("Create done\r\n");
}
